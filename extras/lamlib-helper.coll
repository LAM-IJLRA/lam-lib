LAM.%wrap, "Modulo wrapping linearly in the negative range.";LAM.%wrap~, "Modulo wrapping linearly in the negative range.";LAM.2d.magnifier, "A graphic zoom, with blur effect";LAM.2d_index, "Splits a surface into MxN zones.";LAM.2dgrid, "A module from the LAM.lib.";LAM.AVlooper, "Audio/Video looper.";LAM.AVlooper.play~, "Audio/Video looper.";LAM.AVlooper.rec~, "Audio/Video looper.";LAM.CheapAutotune~, "Audio pitch alignment on a given scale.";LAM.DCblock~, "DC removal";LAM.EqualLoudnessCurve, "Returns loudness for any frequency/phon input.";LAM.FAOS, "First Active Output Stack.";LAM.LAOS, "Last Active Output Stack.";LAM.MIDI.panic, "All-notes-off utility.";LAM.Nclick, "Detect double, triple, etc.. clicks.";LAM.OSC-monoroute, "Regexp based OSC routing.";LAM.OSC-multiroute, "Regexp based OSC list routing.";LAM.OSC.leveldown, "Strip OSC message N level(s) down.";LAM.OSC.levelup, "Strip OSC message N level(s) up.";LAM.OSC2JSON, "Convert OSC style address to dict's style address.";LAM.OSC2dict, "Convert OSC style address to dict's style address.";LAM.PLL~, "An audio Phase Locked Loop (PLL) implementation.";LAM.PLL~ , "An audio Phase Locked Loop (PLL) implementation.";LAM.PLL~ @obj-desc, "A digital lutherie library";LAM.Roulette, "Based on the Roulette theory by Blaise Pascal after his toothache.";LAM.TUIO.decode, "A max-made TUIO decoder.";LAM.ac-supersaw~, "JP-8000 supersaw imitation.";LAM.addeltaclip, "Relative draggin.";LAM.additiveFM~, "Frequency modulation of additive synthesis.";LAM.additiveHarmoFM~, "Frequency modulation of additive synthesis.";LAM.additive~, "Additive synthesis.";LAM.anticlick~, "Enveloppe generator to prevent click during sample looping.";LAM.anyrotate, "Rotate a figure from any point elsewhere in 2D.";LAM.arc., "A module from the LAM.lib.";LAM.arc.as2h, "Compute arc height and theta from length and width";LAM.ascii2utf8, "Convert ascii to utf8 encoding.";LAM.baglist, "Make chord out of elements.";LAM.blowtube~, "Rotating-tube-like harmonics.";LAM.bounded_pseudosigmoid, "A S-function made of two polynomials.";LAM.bounded_sigmoid, "A proper sigmoid function with input range reduced to 0-1 thanks to tanh.";LAM.bounds, "Find lower and upper bounds in a list.";LAM.bounds.index, "Find lower and upper bound index in a list.";LAM.carrywrap, "Circular number roll with carry count.";LAM.cartohexagrid, "Cardinal to hexagonal grid coordinate.";LAM.cheapvocoder~, "Cheap and efficient robot voice.";LAM.clickramp~, "Signal-triggered ramp.";LAM.clipclock, "Selectable time position with carry and clipping";LAM.closest, "Find closest element in a list.";LAM.continoctave, "Continuous octave shifting";LAM.cp.hub, "Module connection made easy";LAM.cp.map.presets, "Preset system for connections bewteen LAM.cp.params";LAM.cp.maps.presets, "Preset system for connections bewteen LAM.cp.params";LAM.cp.param.in, "State saving version of LAM.cp.receive";LAM.cp.presets, "Preset system for LAM.cp.params";LAM.cp.receive, "Multi-addresses version of receive";LAM.crossProduct, "Vector cross product.";LAM.crosscorrelation.fft.zeropad~, "Cross-correlation with fft and zeropadding.";LAM.crosscorrelation.fft~, "Cross-correlation with fft.";LAM.crosscorrelation.pfft~, "Cross-correlation with pfft.";LAM.d2r, "Degree to radian conversion.";LAM.debounce, "DSP debounce utility.";LAM.debounceclick~, "DSP debounce utility.";LAM.debounce~, "DSP debounce utility.";LAM.dec2bin, "Decimal to binary conversion.";LAM.dec2hex, "Decimal to hexadecimal conversion.";LAM.delaynode, "Centralized remote delay.";LAM.deque, "Double ended queue.";LAM.dict.keyrename, "Facility to rename keys.";LAM.dict.reify, "Store hierarchical dictionaries with pointer reference.";LAM.dispatcher.sin, "Dispatch your voices.";LAM.dist.atan~, "Arc-tangent distorsion.";LAM.dist.tanh~, "Hyperbolic tangent distorsion.";LAM.doppler~, "Implementation of the doppler effect.";LAM.dotproduct, "Performs the dot product of two vectors expressed as a list.";LAM.dpr~, "Distance to pitch ratio (aka doppler pitch ratio).";LAM.ducker~, "Enveloppe following + hysteresis thresholding.";LAM.dynfffb~, "Dynamic fffb~ with stereo output.";LAM.energizer, "Time increasing velocity.";LAM.energizer~, "Audio version of LAM.energizer.";LAM.f.call, "Calling callback functions.";LAM.f.dcall, "Calling callback functions.";LAM.f.dio, "Calling callback functions.";LAM.f.io, "Calling callback functions.";LAM.f.recurse, "Calling recursive functions.";LAM.fadeoctave, "Octave dispatch and cross-fade utility";LAM.fadeoctave~, "Octave dispatch and fading.";LAM.filterSimpler~, "A simple sampler with per-voice filter.";LAM.filterslide~, "A bit like slide~ but with a one pole filtering";LAM.fontlist, "Just like fontlist but sorted alphabetically.";LAM.fon~, "To filter or not to filter. That is the object";LAM.freqtosamps, "Convert frequency to samples.";LAM.gah~, "A gate that holds its output.";LAM.gaussian, "Gaussian function.";LAM.gaussian~, "Gaussian wavetable.";LAM.gcdlcm~, "Greatest Common Denominator and Least Common Multple";LAM.gen.PLL~, "An audio Phase Locked Loop (PLL) implementation...in gen";LAM.gen.PLL~ , "An audio Phase Locked Loop (PLL) implementation...in gen";LAM.gen.karpizz~, "gen~ implementation of the LAM.faust.karpizz~ object (work in progress).";LAM.gen.onepolems~, "Like onepole~ but damping time expressed in ms";LAM.glissandi~, "A audio synth based on glissandi";LAM.goldenratio, "For a glittering sound.";LAM.grid, "Divide continuous space into evenly labelled zones.";LAM.gridindex, "Divide continuous space into evenly labelled zones.";LAM.groups, "Make groups from ID sequentually.";LAM.handclap~, "For disco instruments only.";LAM.harmoFM~, "split harmonic and disharmonic control.";LAM.hex2dec, "Hexadecimal to decimal conversion.";LAM.hub, "Module connection made easy";LAM.hub.dev, "Module connection made easy";LAM.hysteresis, "A simple hysteresis module.";LAM.hysteresis~, "A simple hysteresis module.";LAM.indexToCoord, "Absolute cell index to cell coordinates.";LAM.intbetween, "Output the serie of integers between to boundaries.";LAM.interpolist, "Map any numerical input to a list.";LAM.intnogap, "Don't miss any step.";LAM.jit.2Dgaussian, "2D gaussian... in jitter.";LAM.jit.3dscope~, "A nice looking scope, not for measurment purpose.";LAM.jit.GOL.scoreMaker, "View temporal evolution of GoL oscillators.";LAM.jit.HarrDecomposition, "Haar wavelet transform for jit matrices.";LAM.jit.RLEreader, "Read RLE file (check RLE format in Golly documentation).";LAM.jit.bfade, "Time-step based target matrix fading.";LAM.jit.bounded_sigmoid, "Kinda contrast function";LAM.jit.bounds.indx, "Jitter version of LAM.bounds.index.";LAM.jit.cartopol, "Cartesian to 2D polar coordinates transform.";LAM.jit.cartospher, "Cartesian to 3D spherical coordinates transform.";LAM.jit.cellblock.reorder, "Utility for jit.cellblock/coll objects";LAM.jit.cellblock.slice1st, "Mouse utility for the jit.cellbock object.";LAM.jit.compactness, "Compute shape compactness";LAM.jit.dim.dotproduct, "Performs the dot product of two vectors expressed on jit.matrices dimensions.";LAM.jit.dimsum, "Sum cells along a dimension.";LAM.jit.filtergraph, "Plotting the bode plot";LAM.jit.gl.DSW~, "'a.k.a. Dual Speed Waveform'. Running signal vs engraved signal";LAM.jit.gl.circlemesh, "Cursor fancy vizualizer.";LAM.jit.gl.circularwave~, "A sound vizualisation module. Pretty self-explicit.";LAM.jit.gl.dyncanvas, "Implementation of visual octaves aka dynamic canvas.";LAM.jit.gl.extrude, "Extrude a 3d mesh with a luminance map.";LAM.jit.gl.gradz, "Graduated circle, defined by section angle.";LAM.jit.gl.scalegrid, "A zoomable-movable grid.";LAM.jit.gl.screentoworld, "Convert screen to GL world coordinates.";LAM.jit.gl.slitscan, "A GL version of the LAM.jit.slitscan module.";LAM.jit.gl.spectroscope, "OpenGL spectrum visualizer.";LAM.jit.gl.squaremesh, "Cursor fancy vizualizer.";LAM.jit.gl.textureset, "Like jit.matrixset, for GL textures.";LAM.jit.gl.waveform~, "Similar to waveform~ object but rendered with OpenGL.";LAM.jit.incircle, "Find circle inside the shape";LAM.jit.lfade, "Time based target matrix fading.";LAM.jit.mirror.circle, "Circular reflexion.";LAM.jit.mirror.plane, "Planar reflexion.";LAM.jit.mirror.quadratic, "Quadratic reflexion.";LAM.jit.norm, "Compute the norm along planes for any planecount, any dimension.";LAM.jit.norm2D, "Compute the norm of a 2d vector.";LAM.jit.oplist, "Allows to combine several inline operation on a matrix with a single instance";LAM.jit.pa2si, "Point-angle to slope-intercept conversion for jit matrices.";LAM.jit.perimeter, "Compute perimeter of vertices shapes";LAM.jit.plane.dotproduct, "Performs the dot product of two vectors expressed on jit.matrices planes.";LAM.jit.polar.xfade, "Polar cross-fading for jit.matrices";LAM.jit.poltocar, "2D polar to cartesian coordinates transform.";LAM.jit.pv2si, "Point-vector to slope-intercept conversion for jit matrices.";LAM.jit.roundedpolygon, "Envelope based corner easing.";LAM.jit.satellites, "Behavioral model of concurrent rotation speed.";LAM.jit.sigmofade, "Time-step based target matrix sigmoid-eased fading.";LAM.jit.slitscan, "A slit-scan effect implementation.";LAM.jit.sphericalharmonics, "Relate it to sound somehow.";LAM.jit.sphertocar, "3d spherical to cartesian coordinates transform.";LAM.jit.submatrix.fill, "Selecting and fill areas in jit.matrices";LAM.jit.submatrix.select, "Selecting and fill areas in jit.matrices";LAM.jit.sum, "Sum all cells value per plane.";LAM.jit.verlet, "A verlet physic implementation.";LAM.karpizz.followpinch, "Karplus-Strong based algorithm with pinch simulation.";LAM.karpizz~, "Karplus-Strong based algorithm with pinch simulation.";LAM.leslie~, "Imitate the leslie effect.";LAM.lib, "A library for digital lutherie.";LAM.lib.super_module, "A digital lutherie library";LAM.lin2pow, "Converts the -1,1 range to 0, +∞.";LAM.list.bfade, "Time-step based target list fading.";LAM.list.find, "Find element in a list and return its index if present.";LAM.list.maxima, "Keep track of maxima in a list.";LAM.list.minima, "Keep track of minima in a list.";LAM.list.ncg, "New / common / gone elements in a list stream.";LAM.list.nearest, "Find nearest neighbour in list.";LAM.list.product, "Compute the product of all items in a list.";LAM.list.xfade, "Like jit.xfade, for lists.";LAM.list2pairs, "Output every possible association of 2 elements without duplicates.";LAM.livelooping~, "Real time sampling and looping.";LAM.lowboost, "Adds harmonics to bass frequencies to boost them.";LAM.makenoteID, "A combination of makenote and poly objects, that works with floating values.";LAM.matrix~, "A flexible send/receive~ version of matrix~.";LAM.max, "An object for messages to Max.";LAM.midiplayer, "A MIDI file player interface to detonate.";LAM.morse, "Decode morse code impulses";LAM.morse.decode, "Decode morse code impulses";LAM.mpoly.insidepoly, "Part of the mpoly system.";LAM.mpoly.notonoff, "Part of the mpoly system.";LAM.mpoly.param, "Interactive polyphony.";LAM.namey.js, "Report a patcher name.";LAM.notenames, "French note names";LAM.notepress, "Convert notein+polyin to a single midinote stream.";LAM.ntapin~, "Very much like tapin~ and tapout~, but with a name.";LAM.ntapout~, "Very much like tapin~ and tapout~, but with a name.";LAM.pa2si, "Point-angle to slope-intercept conversion.";LAM.padsr~, "A 'positive' ADSR";LAM.paf~, "Phase aligned formant.";LAM.pdf, "Probability density function";LAM.pdf~, "Probability density function.";LAM.pd~, "Simple phase distorsion module.";LAM.phasorloop~, "Phasor~ based play/loop control";LAM.pivot2d, "Rotate a figure from any point elsewhere in 2d";LAM.polarmapping, "Because we ain't got square joints.";LAM.polymited, "Limited polyphony with memory.";LAM.polytexture, "Manage multiple jit.gl.texture objects.";LAM.polytop.muter, "Mute system and message dispatcher for the polytop polyphonic system.";LAM.polytop.router, "Event based polyphony routing.";LAM.poscale2rect, "Converts position/scale to min/max coordinates .";LAM.pparam.in, "Prioritized parameter encapsulation";LAM.pravg, "Progressive running average.";LAM.preceive, "Send/receive with priority";LAM.pressureSimpler~, "A pressure-driven beat repeater sampler.";LAM.proba, "Probability gate.";LAM.psend, "Send/receive with priority";LAM.pt.sampler, "Polytope based sampler.";LAM.pulse~, "Audio driven pulse generator.";LAM.pv2si, "Point-vector to slope-intercept conversion.";LAM.quantizattack, "Dynamic quantization on note-on in continuous scale.";LAM.quantize.cat, "Progressive quantization to a grid with slope around values";LAM.r2d, "Radian to degree conversion.";LAM.randistlist, "A weighted random distribution.";LAM.randistlist~, "A weighted random distribution.";LAM.ranges, "Ouputs scaled value between consective intervals.";LAM.ratiotrans, "Rate to semitone converter";LAM.ravg, "Computes running average over last N samples";LAM.rect2poscale, "Converts min/max coordinates into position/scale.";LAM.rectoddeven~, "Odd/even harmonics selection.";LAM.rpoly, "Interactive polyphony.";LAM.rpoly.insidepoly, "Component of the rpoly system";LAM.rpoly.route, "Component of the rpoly system";LAM.s-anticlick~, "Signal version of LAM.anticlick~.";LAM.s2pr~, "Speed to pitch ratio.";LAM.safigran~, "Sample accurate granular synthesis with per grain filter.";LAM.sagliss~, "Sample accurate glisson (granular) synthesis.";LAM.sagrada.busy, "Busy state notifier for LAM.sagrada modules.";LAM.sagrada.granify~, "Turn any input stream into grains.";LAM.sagrada.multilayer~, "Manage layers of granular streams.";LAM.sagrada.trigger~, "The Sagrada objects clock";LAM.sagrada~, "Modular & sample accurate granular synthesis.";LAM.sagran~, "Sample accurate granular synthesis.";LAM.sawcloud~, "A sawtooth based synth.";LAM.scalarProduct, "Vector scalar product.";LAM.scroller, "1 axis zooming / scrolling facility.";LAM.shiftedscaling, "Draggable, sizable.";LAM.shoelacearea, "Compute the area inside the *non-intersecting* polygon";LAM.showip, "Retrieves IPV4 IP adress.";LAM.simpler~, "A simple sampler based on Less example.";LAM.sinx=kx, "Solve the equation with Newton method.";LAM.slicereverser, "Step reverse sound, with anticipated beats.";LAM.slicereverser~, "Step reverse sound, with anticipated beats.";LAM.slidems~, "Like slide~ but with arguments expressed in ms";LAM.slopeclip~, "Implements the somehow expected behavior of deltaclip~";LAM.son~, "To slide or not to slide. That is the object";LAM.spat4~, "Quad spatialization.";LAM.speedgate, "Lock the gate during a given time.";LAM.stretcher~, "Cheap time-stretching.";LAM.super_module, "A module from the LAM.lib.";LAM.taptempo, "Tap it to know the tempo.";LAM.taptempo~, "Tap the mic to know the tempo.";LAM.toLowerCase, "Convert lower case messages to uppercase.";LAM.toUpperCase, "Convert upper case messages to lower case.";LAM.transratio, "Semitone to rate converter";LAM.transratio~, "Semitone to rate converter in signal";LAM.trianglewave~, "Produces a shapeable triangle from a ramp.";LAM.ttpb, "Take the power back! retrieves power coefficient from 3 points.";LAM.urndistlist, "Generate random numbers without duplicates and with priobability";LAM.voronoi.js, "Interactive voronoi algorithm.";LAM.voronoijs, "Interactive voronoi algorithm.";LAM.vproduct, "Compute the product of all components of a vector.";LAM.wc2re, "Wildcard utility.";LAM.wildcard, "Wildcard utility.";LAM.wobblebass~, "Get down.";LAM.wobblefilter~, "Dubstep filtering.";LAM.wobblepad~, "Some tri-wave synth.";LAM.wooblepad, "Some tri-wave synth.";LAM.wooblepad~, "Some tri-wave synth.";LAM.wrapinterval, "Wrapped arpeggi";LAM.wrappinterval, "Wrapped arpeggi";LAM.xy2lr, "Convert x/y axis to left/right range";LAM.zl.ncg, "New/common/gone elements in a list stream.";LAM.zl.product, "Compute the product of all items in a list.";LAM.zlbaglist, "Make chord out of elements.";"Pitch processing example", "Various kind of pitch spaces and transformations, a cookbook for copy/paste";"Tactile feedback", "What to send in your tactile speakers";"gen~ utilities", "Gen~ implementation of a few useful algos.";mp.TUI.hub, "Modular touchable GUI system";mp.branches, "Slide from one root value to a tree of other values.";mp.change, "Change filtering for mp.events";mp.event.merge, "Merge incoming mp-events.";mp.param.change, "Observe if param changed, per id";